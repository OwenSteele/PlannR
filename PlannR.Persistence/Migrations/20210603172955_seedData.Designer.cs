// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlannR.Persistence;

namespace PlannR.Persistence.Migrations
{
    [DbContext(typeof(PlannrDbContext))]
    [Migration("20210603172955_seedData")]
    partial class seedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlannR.Domain.Entities.Accomodation", b =>
                {
                    b.Property<Guid>("AccomodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CostPerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nights")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccomodationId");

                    b.HasIndex("AccomodationTypeId");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("TripId");

                    b.ToTable("Accomodations");

                    b.HasData(
                        new
                        {
                            AccomodationId = new Guid("f20529ca-7888-4967-84d0-044b1dfaf984"),
                            AccomodationTypeId = new Guid("7648f662-e3c9-4e92-a33e-48a46c361679"),
                            CostPerNight = 192m,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hotel for the trip, in Nice on the beach",
                            EndDateTime = new DateTime(2022, 6, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("3a7412f5-1c27-4993-98e2-f36de88871c5"),
                            Name = "Le Meridien Hotel",
                            Nights = 8,
                            Rooms = 2,
                            StartDateTime = new DateTime(2022, 6, 10, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailReminderEnabled")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("EmailReminderTimer")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("TripId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("578adb0d-7183-4e65-8ed7-f69230fef64e"),
                            CompanyName = "La Rotonde",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Birthday dinner!",
                            EmailReminderEnabled = false,
                            EndDateTime = new DateTime(2022, 6, 11, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("c08e6a5a-51fe-47b8-9c3f-80b0e9125aa1"),
                            LocationId = new Guid("5a3613aa-3a39-44fd-9294-8f59f23b87be"),
                            Name = "Dinner at La Rotonde",
                            StartDateTime = new DateTime(2022, 6, 11, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        },
                        new
                        {
                            EventId = new Guid("fabb3e78-7161-483b-93cc-7dd34516136d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Visit to an amazing cathedral in east Nice",
                            EmailReminderEnabled = false,
                            EndDateTime = new DateTime(2022, 6, 17, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("48b9dfb5-af95-48ff-956d-8306c8e06361"),
                            LocationId = new Guid("831dae8e-9866-482b-8f93-08e5066fd992"),
                            Name = "Visit Cath�drale Saint-Nicolas de Nice",
                            StartDateTime = new DateTime(2022, 6, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        },
                        new
                        {
                            EventId = new Guid("a3dc5619-ace9-4609-8684-679d929e0621"),
                            CompanyName = "Mayssa Beach",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Late lunch on the shoreline, during our explore",
                            EmailReminderEnabled = false,
                            EndDateTime = new DateTime(2022, 6, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("973e695f-1457-451e-91e9-cc1ae304c6f2"),
                            LocationId = new Guid("3cb658dd-8d38-46ed-b998-88a49324b309"),
                            Name = "Lunch at Mayssa Beach",
                            StartDateTime = new DateTime(2022, 6, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RouteId");

                    b.HasIndex("TripId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tour De Nice!",
                            StartDateTime = new DateTime(2022, 6, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.RoutePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("RouteId");

                    b.ToTable("RoutePoints");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8188dd6-33b2-4f07-96e2-1178ba21503d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("3a7412f5-1c27-4993-98e2-f36de88871c5"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("92187c3d-db6b-44f7-8ab4-294ec4766916"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("4dd719de-44e2-4a5b-95f7-87129f30f399"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("db097829-352b-4146-a80f-e31b019f2513"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("4a3385bf-537b-44ea-be30-9f626aa5a63d"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 11, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d721c9af-c204-44c6-8edf-0b75d24715ed"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("d4ea4e13-d37c-4f93-81ad-899fc0b75409"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("77066f35-f487-43e6-bd0d-ab4df183afd3"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("57f62afa-0861-4070-8f11-d9e1a0f2a994"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d0bb95d0-b208-456a-826f-84da54601d0a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("a3dc5619-ace9-4609-8684-679d929e0621"),
                            LocationId = new Guid("3cb658dd-8d38-46ed-b998-88a49324b309"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("13c427f4-abcf-48ac-a3da-c8f0ff5f4439"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2022, 6, 14, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("3a7412f5-1c27-4993-98e2-f36de88871c5"),
                            RouteId = new Guid("5c71abe1-23bf-492b-bba9-3b60c50c1576"),
                            StartDateTime = new DateTime(2022, 6, 14, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Transport", b =>
                {
                    b.Property<Guid>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EndLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StartLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransportId");

                    b.HasIndex("EndLocationId")
                        .IsUnique()
                        .HasFilter("[EndLocationId] IS NOT NULL");

                    b.HasIndex("StartLocationId")
                        .IsUnique()
                        .HasFilter("[StartLocationId] IS NOT NULL");

                    b.HasIndex("TransportTypeId");

                    b.HasIndex("TripId");

                    b.ToTable("Transports");

                    b.HasData(
                        new
                        {
                            TransportId = new Guid("5417554a-8220-450e-b357-52456334f1fc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Taxi with a black cab to Heathrow",
                            EndDateTime = new DateTime(2022, 6, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocationId = new Guid("429d2829-eeb9-4803-aa8b-475811284232"),
                            Name = "Taxi to the airport",
                            StartDateTime = new DateTime(2022, 6, 10, 17, 15, 0, 0, DateTimeKind.Unspecified),
                            StartLocationId = new Guid("0934b953-fb1f-42b9-81ae-62a614ee1826"),
                            TransportTypeId = new Guid("7e2d7cde-75a8-4c15-ac90-2c8bc113cad2"),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        },
                        new
                        {
                            TransportId = new Guid("8273da23-c6d6-411a-9a2a-79c48ba32b51"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Flight BA 354 LHR - NCE",
                            EndDateTime = new DateTime(2022, 6, 10, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocationId = new Guid("ec2d23b5-ce63-49de-8d0d-2f50dbdf63db"),
                            Name = "Flight Heathrow to Nice",
                            StartDateTime = new DateTime(2022, 6, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocationId = new Guid("429d2829-eeb9-4803-aa8b-475811284232"),
                            TransportTypeId = new Guid("b0ce54b5-e4fb-4870-9343-4346da5be65d"),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        },
                        new
                        {
                            TransportId = new Guid("aa7a8f38-a9fa-4d86-a762-39e724ee4a83"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Local train from Nice airport thats runs into nice town centre.",
                            EndDateTime = new DateTime(2022, 6, 10, 23, 30, 0, 0, DateTimeKind.Unspecified),
                            EndLocationId = new Guid("836776dd-b072-47f0-ab41-db806be82eb4"),
                            Name = "Train from the airport to the hotel",
                            StartDateTime = new DateTime(2022, 6, 10, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocationId = new Guid("98e11885-fb8e-41f9-958b-ea5f4dea54d5"),
                            TransportTypeId = new Guid("a7538091-e359-497b-a780-9e1352ad515b"),
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EndLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StartLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TripId");

                    b.HasIndex("EndLocationId")
                        .IsUnique()
                        .HasFilter("[EndLocationId] IS NOT NULL");

                    b.HasIndex("StartLocationId")
                        .IsUnique()
                        .HasFilter("[StartLocationId] IS NOT NULL");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            TripId = new Guid("eb5c9c56-56ef-4b59-9a5f-34b3fd25240d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(Sample Trip) A trip to Nice for my birthday, with Emma and Brandon",
                            EndDateTime = new DateTime(2022, 6, 19, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            EndLocationId = new Guid("3a7412f5-1c27-4993-98e2-f36de88871c5"),
                            Name = "Birthday trip to Nice!",
                            StartDateTime = new DateTime(2022, 6, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocationId = new Guid("0934b953-fb1f-42b9-81ae-62a614ee1826")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.EntityTypes.AccomodationType", b =>
                {
                    b.Property<Guid>("AccomodationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccomodationTypeId");

                    b.ToTable("AccomodationTypes");

                    b.HasData(
                        new
                        {
                            AccomodationTypeId = new Guid("7648f662-e3c9-4e92-a33e-48a46c361679"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hotel"
                        },
                        new
                        {
                            AccomodationTypeId = new Guid("999e4496-0cba-4142-bed4-bad5fe73c54c"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hostel"
                        },
                        new
                        {
                            AccomodationTypeId = new Guid("e36e5075-8593-4090-b636-03d0266a5dbf"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Camping"
                        },
                        new
                        {
                            AccomodationTypeId = new Guid("5148e821-5744-4e2c-ba3e-6717fd76272a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AirBnB"
                        });
                });

            modelBuilder.Entity("PlannR.Domain.EntityTypes.EventType", b =>
                {
                    b.Property<Guid>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = new Guid("c08e6a5a-51fe-47b8-9c3f-80b0e9125aa1"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dinner"
                        },
                        new
                        {
                            EventTypeId = new Guid("8aad00ac-386e-4bac-80a3-8e6060925699"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Birthday"
                        },
                        new
                        {
                            EventTypeId = new Guid("67e04e6a-9255-4ab7-97f1-329b8691eca9"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Party"
                        },
                        new
                        {
                            EventTypeId = new Guid("973e695f-1457-451e-91e9-cc1ae304c6f2"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lunch"
                        },
                        new
                        {
                            EventTypeId = new Guid("c680cdc8-a192-443a-955b-9c9b8b7eea1a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Meeting"
                        },
                        new
                        {
                            EventTypeId = new Guid("6d9bdd96-3983-46f8-8605-deb42b781e7a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Concert"
                        },
                        new
                        {
                            EventTypeId = new Guid("40ba7966-82ba-49b9-a7a7-c2d6d48e8c6c"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sporting event"
                        },
                        new
                        {
                            EventTypeId = new Guid("48b9dfb5-af95-48ff-956d-8306c8e06361"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sightseeing"
                        });
                });

            modelBuilder.Entity("PlannR.Domain.EntityTypes.TransportType", b =>
                {
                    b.Property<Guid>("TransportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasFixedRoute")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportTypeId");

                    b.ToTable("TransportTypes");

                    b.HasData(
                        new
                        {
                            TransportTypeId = new Guid("0516b31f-3bdc-4d1d-b8d0-f562bb63bb81"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Bus"
                        },
                        new
                        {
                            TransportTypeId = new Guid("a7538091-e359-497b-a780-9e1352ad515b"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Train"
                        },
                        new
                        {
                            TransportTypeId = new Guid("c5f6bfcf-fe9f-43f4-9096-11f3579d4d9a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Walking"
                        },
                        new
                        {
                            TransportTypeId = new Guid("77e7da2d-d1d1-4c3b-ab8f-97496873fe38"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Car"
                        },
                        new
                        {
                            TransportTypeId = new Guid("7e2d7cde-75a8-4c15-ac90-2c8bc113cad2"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Taxi"
                        },
                        new
                        {
                            TransportTypeId = new Guid("e23eb33a-a49e-4050-a4f2-0d693b7db5c4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Bicycle"
                        },
                        new
                        {
                            TransportTypeId = new Guid("b0ce54b5-e4fb-4870-9343-4346da5be65d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasFixedRoute = false,
                            IsPublic = false,
                            Name = "Plane"
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Shared.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Booking");
                });

            modelBuilder.Entity("PlannR.Domain.Shared.BookingFile", b =>
                {
                    b.Property<Guid>("BookingFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingFileId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingFile");
                });

            modelBuilder.Entity("PlannR.Domain.Shared.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AltitudeInMetres")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("0934b953-fb1f-42b9-81ae-62a614ee1826"),
                            Address = "London W8 4PY",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 51.505580999999999,
                            Longitude = -0.187664,
                            Name = "Home - Kensington"
                        },
                        new
                        {
                            LocationId = new Guid("3a7412f5-1c27-4993-98e2-f36de88871c5"),
                            Address = "1 Prom. des Anglais, 06046 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.695451191777302,
                            Longitude = 7.265805593662451,
                            Name = "Le Meridien Nice"
                        },
                        new
                        {
                            LocationId = new Guid("429d2829-eeb9-4803-aa8b-475811284232"),
                            Address = "Heathrow Airport Terminal 5, Longford TW6 2GW",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 51.47172252094142,
                            Longitude = -0.48761302520656669,
                            Name = "Heathrow Airport"
                        },
                        new
                        {
                            LocationId = new Guid("ec2d23b5-ce63-49de-8d0d-2f50dbdf63db"),
                            Address = "Rue Costes et Bellonte, 06206 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.660675787609719,
                            Longitude = 7.2145239508615173,
                            Name = "Nice Cote d'Azur Airport"
                        },
                        new
                        {
                            LocationId = new Guid("98e11885-fb8e-41f9-958b-ea5f4dea54d5"),
                            Address = "06200 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.66884420834225,
                            Longitude = 7.2111980132427815,
                            Name = "Grand Arenas Train Station"
                        },
                        new
                        {
                            LocationId = new Guid("836776dd-b072-47f0-ab41-db806be82eb4"),
                            Address = "Avenue Thiers, 06008 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.704857352503517,
                            Longitude = 7.2615237793972414,
                            Name = "Nice-Ville"
                        },
                        new
                        {
                            LocationId = new Guid("5a3613aa-3a39-44fd-9294-8f59f23b87be"),
                            Address = "37 Prom. des Anglais, 06000 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.694572199588656,
                            Longitude = 7.2577979809371778,
                            Name = "La Rotonde Nice"
                        },
                        new
                        {
                            LocationId = new Guid("831dae8e-9866-482b-8f93-08e5066fd992"),
                            Address = "Avenue Nicolas II, 06000 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.703686541212491,
                            Longitude = 7.2534398669683746,
                            Name = "St Nicholas Russian Orthodox Cathedral"
                        },
                        new
                        {
                            LocationId = new Guid("4dd719de-44e2-4a5b-95f7-87129f30f399"),
                            Address = "65 Rue de France, 06000 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.695606899282765,
                            Longitude = 7.2590205915007919,
                            Name = "Villa Mass�na Mus�e"
                        },
                        new
                        {
                            LocationId = new Guid("4a3385bf-537b-44ea-be30-9f626aa5a63d"),
                            Address = "2-16 Avenue de Verdun, 06000 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.695697722830552,
                            Longitude = 7.2679464761047363,
                            Name = "Jardin Albert 1er"
                        },
                        new
                        {
                            LocationId = new Guid("d4ea4e13-d37c-4f93-81ad-899fc0b75409"),
                            Address = "3 Pl. Rossetti, 06300 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.697103296196026,
                            Longitude = 7.2759387247896905,
                            Name = "Cath�drale Sainte-R�parate de Nice"
                        },
                        new
                        {
                            LocationId = new Guid("57f62afa-0861-4070-8f11-d9e1a0f2a994"),
                            Address = "Chemin du Fort du Mont Alban, 06000 Nice, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.701361486241971,
                            Longitude = 7.3000138371561558,
                            Name = "Fort du Mont Alban"
                        },
                        new
                        {
                            LocationId = new Guid("3cb658dd-8d38-46ed-b998-88a49324b309"),
                            Address = "Place Wilson, 06230 Villefranche-sur-Mer, France",
                            AltitudeInMetres = 0.0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.702579439477162,
                            Longitude = 7.3120155646662974,
                            Name = "Mayssa Beach Restaurant"
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.AccomodationBooking", b =>
                {
                    b.HasBaseType("PlannR.Domain.Shared.Booking");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AccomodationId")
                        .IsUnique()
                        .HasFilter("[AccomodationId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("AccomodationBooking");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("dceab942-149b-49a0-bb48-25992581b529"),
                            Comments = "Booking for 8 nights, 2 rooms",
                            Cost = 3072m,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "www.marriott.com/hotels/travel/ncemd-le-m%C3%A9ridien-nice/?scid=bb1a189a-fec3-4d19-a255-54ba596febe2&y_source=1_Mjc4MjIwOC03MTUtbG9jYXRpb24uZ29vZ2xlX3dlYnNpdGVfb3ZlcnJpZGU%3D",
                            Name = "Le Meridien Nice Room Reservations",
                            AccomodationId = new Guid("f20529ca-7888-4967-84d0-044b1dfaf984")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.EventBooking", b =>
                {
                    b.HasBaseType("PlannR.Domain.Shared.Booking");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("EventBooking");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("71177157-3a7c-4b6b-a428-02de1f1a92e3"),
                            Comments = "Deposit for my birthday dinner",
                            Cost = 10m,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "la-rotonde-brasserie@hotel-negresco-nice.com",
                            Link = "https://www.hotel-negresco-nice.com/sites/default/files/2021-05/MENU-Rotonde-20052021.pdf",
                            Name = "La Rotonde Reservation",
                            EventId = new Guid("578adb0d-7183-4e65-8ed7-f69230fef64e")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.TransportBooking", b =>
                {
                    b.HasBaseType("PlannR.Domain.Shared.Booking");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TransportId")
                        .IsUnique()
                        .HasFilter("[TransportId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("TransportBooking");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("469504cd-0f4f-4157-b6ee-b8da3f8cb9ed"),
                            Comments = "Tickets for Me, Brandon and Emma to fly to Nice",
                            Cost = 312m,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bookings@ba.com",
                            Link = "www.britishairways.com/en-gb/destinations/nice/flights-to-nice",
                            Name = "BA Tickets BA 354 x 3",
                            TransportId = new Guid("8273da23-c6d6-411a-9a2a-79c48ba32b51")
                        });
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Accomodation", b =>
                {
                    b.HasOne("PlannR.Domain.EntityTypes.AccomodationType", "AccomodationType")
                        .WithMany("Accomodations")
                        .HasForeignKey("AccomodationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannR.Domain.Shared.Location", "Location")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.Accomodation", "LocationId");

                    b.HasOne("PlannR.Domain.Entities.Trip", "Trip")
                        .WithMany("Accomodations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccomodationType");

                    b.Navigation("Location");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Event", b =>
                {
                    b.HasOne("PlannR.Domain.EntityTypes.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannR.Domain.Shared.Location", "Location")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.Event", "LocationId");

                    b.HasOne("PlannR.Domain.Entities.Trip", "Trip")
                        .WithMany("Events")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("Location");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Route", b =>
                {
                    b.HasOne("PlannR.Domain.Entities.Trip", "Trip")
                        .WithMany("Routes")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.RoutePoint", b =>
                {
                    b.HasOne("PlannR.Domain.Entities.Event", "AssociatedEvent")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.RoutePoint", "EventId");

                    b.HasOne("PlannR.Domain.Shared.Location", "Location")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.RoutePoint", "LocationId");

                    b.HasOne("PlannR.Domain.Entities.Route", null)
                        .WithMany("Points")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedEvent");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Transport", b =>
                {
                    b.HasOne("PlannR.Domain.Shared.Location", "EndLocation")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.Transport", "EndLocationId");

                    b.HasOne("PlannR.Domain.Shared.Location", "StartLocation")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.Transport", "StartLocationId");

                    b.HasOne("PlannR.Domain.EntityTypes.TransportType", "TransportType")
                        .WithMany("Transports")
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannR.Domain.Entities.Trip", "Trip")
                        .WithMany("Transports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndLocation");

                    b.Navigation("StartLocation");

                    b.Navigation("TransportType");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Trip", b =>
                {
                    b.HasOne("PlannR.Domain.Shared.Location", "EndLocation")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.Trip", "EndLocationId");

                    b.HasOne("PlannR.Domain.Shared.Location", "StartLocation")
                        .WithOne()
                        .HasForeignKey("PlannR.Domain.Entities.Trip", "StartLocationId");

                    b.Navigation("EndLocation");

                    b.Navigation("StartLocation");
                });

            modelBuilder.Entity("PlannR.Domain.Shared.BookingFile", b =>
                {
                    b.HasOne("PlannR.Domain.Shared.Booking", null)
                        .WithMany("Reservations")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlannR.Domain.Entities.AccomodationBooking", b =>
                {
                    b.HasOne("PlannR.Domain.Entities.Accomodation", "Accomodation")
                        .WithOne("Booking")
                        .HasForeignKey("PlannR.Domain.Entities.AccomodationBooking", "AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accomodation");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.EventBooking", b =>
                {
                    b.HasOne("PlannR.Domain.Entities.Event", "Event")
                        .WithOne("Booking")
                        .HasForeignKey("PlannR.Domain.Entities.EventBooking", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.TransportBooking", b =>
                {
                    b.HasOne("PlannR.Domain.Entities.Transport", "Transport")
                        .WithOne("Booking")
                        .HasForeignKey("PlannR.Domain.Entities.TransportBooking", "TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Accomodation", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Event", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Route", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Transport", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PlannR.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Accomodations");

                    b.Navigation("Events");

                    b.Navigation("Routes");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("PlannR.Domain.EntityTypes.AccomodationType", b =>
                {
                    b.Navigation("Accomodations");
                });

            modelBuilder.Entity("PlannR.Domain.EntityTypes.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("PlannR.Domain.EntityTypes.TransportType", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("PlannR.Domain.Shared.Booking", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
